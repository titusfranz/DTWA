{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for is_diagonal_noise at /Users/titusfranz/.julia/packages/SciMLBase/BoNUy/src/problems/problem_traits.jl:6 declares type variable ND but does not use it.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for similar at /Users/titusfranz/.julia/packages/DEDataArrays/Cfp07/src/DEDataArrays.jl:64 declares type variable T but does not use it.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for promote_u0 at /Users/titusfranz/.julia/packages/DiffEqBase/bMXa3/src/forwarddiff.jl:4 declares type variable N but does not use it.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for EnsembleSolution_adjoint at /Users/titusfranz/.julia/packages/DiffEqBase/bMXa3/src/chainrules.jl:93 declares type variable T but does not use it.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mAES-NI is not enabled, so AESNI and ARS are not available.\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ Random123 ~/.julia/packages/Random123/aUJHB/src/Random123.jl:55\u001b[39m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for TwiceDifferentiable at /Users/titusfranz/.julia/packages/NLSolversBase/cfJrN/src/objective_types/incomplete.jl:96 declares type variable TH but does not use it.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: method definition for show at /Users/titusfranz/.julia/packages/Optim/wFOeG/src/univariate/printing.jl:7 declares type variable T but does not use it.\n"
     ]
    }
   ],
   "source": [
    "using DTWA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "signal (11): Segmentation fault: 11\n",
      "in expression starting at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/packagedef.jl:150\n",
      "ml_matches at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "ijl_gf_invoke_lookup at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "whichtt at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/utils.jl:43\n",
      "#prepare_call#41 at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:240\n",
      "prepare_call##kw at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:231 [inlined]\n",
      "#determine_method_for_expr#45 at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:571\n",
      "determine_method_for_expr##kw at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:562 [inlined]\n",
      "#enter_call_expr#46 at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:612\n",
      "enter_call_expr at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:610 [inlined]\n",
      "macro expansion at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/construct.jl:745 [inlined]\n",
      "_precompile_ at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/precompile.jl:7\n",
      "unknown function (ip: 0x104d44d73)\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "do_call at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "eval_body at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_interpret_toplevel_thunk at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "ijl_toplevel_eval_in at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "eval at ./boot.jl:368 [inlined]\n",
      "include_string at ./loading.jl:1428\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "_include at ./loading.jl:1488\n",
      "include at ./Base.jl:419\n",
      "jfptr_include_39730 at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/sys.dylib (unknown line)\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_f__call_latest at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "include at /Users/titusfranz/.julia/packages/JuliaInterpreter/QtVFX/src/JuliaInterpreter.jl:1\n",
      "unknown function (ip: 0x1010d40b7)\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "do_call at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "eval_body at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_interpret_toplevel_thunk at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "ijl_toplevel_eval_in at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "eval at ./boot.jl:368 [inlined]\n",
      "include_string at ./loading.jl:1428\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "_include at ./loading.jl:1488\n",
      "include at ./Base.jl:419 [inlined]\n",
      "include_package_for_output at ./loading.jl:1554\n",
      "jfptr_include_package_for_output_37451 at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/sys.dylib (unknown line)\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "do_call at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "eval_body at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_interpret_toplevel_thunk at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_toplevel_eval_flex at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "ijl_toplevel_eval_in at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jlplt_ijl_toplevel_eval_in_12092 at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/sys.dylib (unknown line)\n",
      "eval at ./boot.jl:368 [inlined]\n",
      "include_string at ./loading.jl:1428\n",
      "include_string at ./loading.jl:1438\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "exec_options at ./client.jl:301\n",
      "_start at ./client.jl:522\n",
      "jfptr__start_30903 at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/sys.dylib (unknown line)\n",
      "ijl_apply_generic at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "true_main at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "jl_repl_entrypoint at /Applications/Julia-1.8.app/Contents/Resources/julia/lib/julia/libjulia-internal.1.8.dylib (unknown line)\n",
      "Allocations: 5547870 (Pool: 5538614; Big: 9256); GC: 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[91m\u001b[1mERROR: \u001b[22m\u001b[39mLoadError: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Failed to precompile JuliaInterpreter [aa1ae85d-cabe-5617-a682-6adf51b2e16a] to /Users/titusfranz/.julia/compiled/v1.8/JuliaInterpreter/jl_PZ4BOo.\n",
      "Stacktrace:\n",
      "  [1] \u001b[0m\u001b[1merror\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90ms\u001b[39m::\u001b[0mString\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4merror.jl:35\u001b[24m\u001b[39m\n",
      "  [2] \u001b[0m\u001b[1mcompilecache\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mpkg\u001b[39m::\u001b[0mBase.PkgId, \u001b[90mpath\u001b[39m::\u001b[0mString, \u001b[90minternal_stderr\u001b[39m::\u001b[0mIO, \u001b[90minternal_stdout\u001b[39m::\u001b[0mIO, \u001b[90mkeep_loaded_modules\u001b[39m::\u001b[0mBool\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1707\u001b[24m\u001b[39m\n",
      "  [3] \u001b[0m\u001b[1mcompilecache\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1651\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m\n",
      "  [4] \u001b[0m\u001b[1m_require\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mpkg\u001b[39m::\u001b[0mBase.PkgId\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1337\u001b[24m\u001b[39m\n",
      "  [5] \u001b[0m\u001b[1m_require_prelocked\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90muuidkey\u001b[39m::\u001b[0mBase.PkgId\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1200\u001b[24m\u001b[39m\n",
      "  [6] \u001b[0m\u001b[1mmacro expansion\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1180\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m\n",
      "  [7] \u001b[0m\u001b[1mmacro expansion\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90m./\u001b[39m\u001b[90m\u001b[4mlock.jl:223\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m\n",
      "  [8] \u001b[0m\u001b[1mrequire\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90minto\u001b[39m::\u001b[0mModule, \u001b[90mmod\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1144\u001b[24m\u001b[39m\n",
      "  [9] \u001b[0m\u001b[1minclude\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90m./\u001b[39m\u001b[90m\u001b[4mBase.jl:419\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m\n",
      " [10] \u001b[0m\u001b[1minclude_package_for_output\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mpkg\u001b[39m::\u001b[0mBase.PkgId, \u001b[90minput\u001b[39m::\u001b[0mString, \u001b[90mdepot_path\u001b[39m::\u001b[0mVector\u001b[90m{String}\u001b[39m, \u001b[90mdl_load_path\u001b[39m::\u001b[0mVector\u001b[90m{String}\u001b[39m, \u001b[90mload_path\u001b[39m::\u001b[0mVector\u001b[90m{String}\u001b[39m, \u001b[90mconcrete_deps\u001b[39m::\u001b[0mVector\u001b[90m{Pair{Base.PkgId, UInt64}}\u001b[39m, \u001b[90msource\u001b[39m::\u001b[0mString\u001b[0m\u001b[1m)\u001b[22m\n",
      "\u001b[90m    @ \u001b[39m\u001b[90mBase\u001b[39m \u001b[90m./\u001b[39m\u001b[90m\u001b[4mloading.jl:1554\u001b[24m\u001b[39m\n",
      " [11] top-level scope\n",
      "\u001b[90m    @ \u001b[39m\u001b[90m\u001b[4mstdin:1\u001b[24m\u001b[39m\n",
      "in expression starting at /Users/titusfranz/.julia/packages/Revise/VskYC/src/Revise.jl:1\n",
      "in expression starting at stdin:1\n"
     ]
    },
    {
     "ename": "ErrorException",
     "evalue": "Failed to precompile Revise [295af30f-e4ad-537b-8983-00126c2a3abe] to /Users/titusfranz/.julia/compiled/v1.8/Revise/jl_dJkzeJ.",
     "output_type": "error",
     "traceback": [
      "Failed to precompile Revise [295af30f-e4ad-537b-8983-00126c2a3abe] to /Users/titusfranz/.julia/compiled/v1.8/Revise/jl_dJkzeJ.\n",
      "\n",
      "Stacktrace:\n",
      "  [1] error(s::String)\n",
      "    @ Base ./error.jl:35\n",
      "  [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool)\n",
      "    @ Base ./loading.jl:1707\n",
      "  [3] compilecache\n",
      "    @ ./loading.jl:1651 [inlined]\n",
      "  [4] _require(pkg::Base.PkgId)\n",
      "    @ Base ./loading.jl:1337\n",
      "  [5] _require_prelocked(uuidkey::Base.PkgId)\n",
      "    @ Base ./loading.jl:1200\n",
      "  [6] macro expansion\n",
      "    @ ./loading.jl:1180 [inlined]\n",
      "  [7] macro expansion\n",
      "    @ ./lock.jl:223 [inlined]\n",
      "  [8] require(into::Module, mod::Symbol)\n",
      "    @ Base ./loading.jl:1144\n",
      "  [9] eval\n",
      "    @ ./boot.jl:368 [inlined]\n",
      " [10] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n",
      "    @ Base ./loading.jl:1428\n",
      " [11] #invokelatest#2\n",
      "    @ ./essentials.jl:729 [inlined]\n",
      " [12] invokelatest\n",
      "    @ ./essentials.jl:726 [inlined]\n",
      " [13] (::VSCodeServer.var\"#198#199\"{VSCodeServer.NotebookRunCellArguments, String})()\n",
      "    @ VSCodeServer ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/packages/VSCodeServer/src/serve_notebook.jl:19\n",
      " [14] withpath(f::VSCodeServer.var\"#198#199\"{VSCodeServer.NotebookRunCellArguments, String}, path::String)\n",
      "    @ VSCodeServer ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/packages/VSCodeServer/src/repl.jl:249\n",
      " [15] notebook_runcell_request(conn::VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, params::VSCodeServer.NotebookRunCellArguments)\n",
      "    @ VSCodeServer ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/packages/VSCodeServer/src/serve_notebook.jl:13\n",
      " [16] dispatch_msg(x::VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, dispatcher::VSCodeServer.JSONRPC.MsgDispatcher, msg::Dict{String, Any})\n",
      "    @ VSCodeServer.JSONRPC ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/packages/JSONRPC/src/typed.jl:67\n",
      " [17] serve_notebook(pipename::String, outputchannel_logger::Base.CoreLogging.SimpleLogger; crashreporting_pipename::String)\n",
      "    @ VSCodeServer ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/packages/VSCodeServer/src/serve_notebook.jl:139\n",
      " [18] top-level scope\n",
      "    @ ~/.vscode/extensions/julialang.language-julia-1.7.13/scripts/notebook/notebook.jl:32"
     ]
    }
   ],
   "source": [
    "using Revise\n",
    "using DTWA\n",
    "using DiffEqBase\n",
    "using Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EnsembleProblem with problem ODEProblem"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "J = 1 * 2π * [0.0 1.0\n",
    "     1.0 0.0];\n",
    "h = 2π * [0.0, 0.0, 0.0];\n",
    "anisotropy = [1.0, 1.0, 0.0]\n",
    "system = XYZSystem(J, h, anisotropy)\n",
    "Ψ = [1., 0., 0.]\n",
    "Ψ = ProductState(2, Ψ)\n",
    "times = LinRange(0, 2, 100)\n",
    "problem = DTWAProblem(system, Ψ, times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol = solve_dtwa(problem, 1000);\n",
    "4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "data": [
        {
         "colorbar": {
          "title": {
           "text": ""
          }
         },
         "legendgroup": "dtwa",
         "line": {
          "color": "rgba(0, 154, 250, 1.000)",
          "dash": "solid",
          "shape": "linear",
          "width": 1
         },
         "mode": "lines",
         "name": "dtwa",
         "showlegend": true,
         "type": "scatter",
         "x": [
          0.020202020202020204,
          0.0404040404040404,
          0.06060606060606061,
          0.0808080808080808,
          0.10101010101010101,
          0.12121212121212122,
          0.1414141414141414,
          0.1616161616161616,
          0.1818181818181818,
          0.20202020202020204,
          0.22222222222222224,
          0.24242424242424243,
          0.2626262626262626,
          0.2828282828282829,
          0.30303030303030304,
          0.32323232323232326,
          0.3434343434343434,
          0.36363636363636365,
          0.38383838383838387,
          0.40404040404040403,
          0.42424242424242425,
          0.4444444444444444,
          0.46464646464646464,
          0.48484848484848486,
          0.5050505050505051,
          0.5252525252525253,
          0.5454545454545455,
          0.5656565656565656,
          0.5858585858585859,
          0.6060606060606061,
          0.6262626262626263,
          0.6464646464646465,
          0.6666666666666666,
          0.6868686868686869,
          0.7070707070707071,
          0.7272727272727273,
          0.7474747474747475,
          0.7676767676767676,
          0.7878787878787878,
          0.8080808080808081,
          0.8282828282828283,
          0.8484848484848485,
          0.8686868686868686,
          0.8888888888888888,
          0.9090909090909091,
          0.9292929292929293,
          0.9494949494949495,
          0.9696969696969696,
          0.9898989898989898,
          1.0101010101010102,
          1.0303030303030303,
          1.0505050505050506,
          1.0707070707070707,
          1.090909090909091,
          1.111111111111111,
          1.1313131313131313,
          1.1515151515151514,
          1.1717171717171717,
          1.1919191919191918,
          1.2121212121212122,
          1.2323232323232323,
          1.2525252525252526,
          1.2727272727272727,
          1.292929292929293,
          1.313131313131313,
          1.3333333333333333,
          1.3535353535353534,
          1.3737373737373737,
          1.393939393939394,
          1.4141414141414141,
          1.4343434343434345,
          1.4545454545454546,
          1.474747474747475,
          1.494949494949495,
          1.5151515151515151,
          1.5353535353535352,
          1.5555555555555556,
          1.5757575757575757,
          1.595959595959596,
          1.6161616161616161,
          1.6363636363636365,
          1.6565656565656566,
          1.676767676767677,
          1.696969696969697,
          1.7171717171717171,
          1.7373737373737372,
          1.7575757575757576,
          1.7777777777777777,
          1.797979797979798,
          1.8181818181818181,
          1.8383838383838385,
          1.8585858585858586,
          1.878787878787879,
          1.898989898989899,
          1.9191919191919191,
          1.9393939393939392,
          1.9595959595959596,
          1.9797979797979797,
          2
         ],
         "xaxis": "x",
         "y": [
          0.5000747046968758,
          0.4980701793577182,
          0.49398617829045954,
          0.4878358302780334,
          0.4796533161145724,
          0.4694933440340412,
          0.45743264275215223,
          0.44357873224075367,
          0.4280646483969921,
          0.4110448375990908,
          0.3926955078954122,
          0.37321375282100033,
          0.3528037944084421,
          0.3316796292424501,
          0.31005872057909095,
          0.2881478437343887,
          0.26614260477595386,
          0.24422370454283976,
          0.22254705524597282,
          0.20123915587643304,
          0.1804003738468615,
          0.16010178122002608,
          0.1403953426541938,
          0.12131139016786692,
          0.10286212202945823,
          0.08505121201870972,
          0.0678787604213557,
          0.05134239545365453,
          0.035453759380600615,
          0.020237196796475735,
          0.005741439287244394,
          -0.007970141310034772,
          -0.020809638673548646,
          -0.032668371368481726,
          -0.043403661270928755,
          -0.05288280581623,
          -0.06098139467485516,
          -0.06759520901632035,
          -0.07263356772734296,
          -0.0760523203119882,
          -0.07786718243148166,
          -0.07812280244818127,
          -0.0768782362429258,
          -0.07420004821343815,
          -0.07018184037947738,
          -0.06492095601009729,
          -0.058523829403353454,
          -0.05107728766988428,
          -0.04267577130626248,
          -0.03341725755068521,
          -0.023421540901445076,
          -0.012805772663961188,
          -0.0016846600840332402,
          0.00982429935003505,
          0.02161022288760312,
          0.03354798452197701,
          0.04553848726307605,
          0.05752045994245546,
          0.06946246972520548,
          0.08136418949239668,
          0.09325934459477683,
          0.10520246929103085,
          0.11725907732688017,
          0.1294931751937372,
          0.1419499987559462,
          0.1546335135352008,
          0.1674799066103929,
          0.18038513902008546,
          0.19321982761505938,
          0.20581309821818589,
          0.21793611282219585,
          0.22935091153622822,
          0.23985621280059172,
          0.24926764485897873,
          0.25743373787560614,
          0.26423954044298875,
          0.2696165433383191,
          0.2735396308073424,
          0.27605246971603864,
          0.2772259747130108,
          0.27715237922476543,
          0.2759248524493417,
          0.27363689543369785,
          0.27042339261536114,
          0.26647431792983106,
          0.26194282471783875,
          0.25696733269399097,
          0.25168469459267784,
          0.24623092037787386,
          0.24073087544154578,
          0.23524362370908944,
          0.22982061970557535,
          0.22447149023068055,
          0.21917236569416432,
          0.21387921731447163,
          0.20852788285616708,
          0.20303691448056554,
          0.19730844259338784,
          0.1912375406340028
         ],
         "yaxis": "y",
         "zmax": null,
         "zmin": null
        }
       ],
       "layout": {
        "annotations": [],
        "height": 400,
        "legend_position": {
         "bgcolor": "rgba(255, 255, 255, 1.000)",
         "bordercolor": "rgba(0, 0, 0, 1)",
         "borderwidth": 1,
         "font": {
          "color": "rgba(0, 0, 0, 1)",
          "family": "sans-serif",
          "size": 11
         },
         "title": {
          "font": {
           "color": "rgba(0, 0, 0, 1)",
           "family": "sans-serif",
           "size": 15
          },
          "text": ""
         },
         "tracegroupgap": 0,
         "traceorder": "normal",
         "x": 1,
         "xanchor": "auto",
         "y": 1,
         "yanchor": "auto"
        },
        "margin": {
         "b": 20,
         "l": 0,
         "r": 0,
         "t": 20
        },
        "paper_bgcolor": "rgba(255, 255, 255, 1.000)",
        "plot_bgcolor": "rgba(255, 255, 255, 1.000)",
        "showlegend": true,
        "width": 600,
        "xaxis": {
         "anchor": "y",
         "domain": [
          0.07646908719743364,
          0.9934383202099737
         ],
         "gridcolor": "rgba(0, 0, 0, 0.1)",
         "gridwidth": 0.5,
         "linecolor": "rgba(0, 0, 0, 1)",
         "mirror": false,
         "range": [
          -0.039191919191919194,
          2.0593939393939396
         ],
         "showgrid": true,
         "showline": true,
         "showticklabels": true,
         "tickangle": 0,
         "tickcolor": "rgb(0, 0, 0)",
         "tickfont": {
          "color": "rgba(0, 0, 0, 1)",
          "family": "sans-serif",
          "size": 11
         },
         "tickmode": "array",
         "ticks": "inside",
         "ticktext": [
          "0.0",
          "0.5",
          "1.0",
          "1.5",
          "2.0"
         ],
         "tickvals": [
          0,
          0.5,
          1,
          1.5,
          2
         ],
         "title": {
          "font": {
           "color": "rgba(0, 0, 0, 1)",
           "family": "sans-serif",
           "size": 15
          },
          "text": "time [μs]"
         },
         "type": "linear",
         "visible": true,
         "zeroline": false,
         "zerolinecolor": "rgba(0, 0, 0, 1)"
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0.07581474190726165,
          0.9901574803149606
         ],
         "gridcolor": "rgba(0, 0, 0, 0.1)",
         "gridwidth": 0.5,
         "linecolor": "rgba(0, 0, 0, 1)",
         "mirror": false,
         "range": [
          -0.09546872766253299,
          0.5174206299112275
         ],
         "showgrid": true,
         "showline": true,
         "showticklabels": true,
         "tickangle": 0,
         "tickcolor": "rgb(0, 0, 0)",
         "tickfont": {
          "color": "rgba(0, 0, 0, 1)",
          "family": "sans-serif",
          "size": 11
         },
         "tickmode": "array",
         "ticks": "inside",
         "ticktext": [
          "0.0",
          "0.1",
          "0.2",
          "0.3",
          "0.4",
          "0.5"
         ],
         "tickvals": [
          0,
          0.1,
          0.2,
          0.30000000000000004,
          0.4,
          0.5
         ],
         "title": {
          "font": {
           "color": "rgba(0, 0, 0, 1)",
           "family": "sans-serif",
           "size": 15
          },
          "text": "magnetization"
         },
         "type": "linear",
         "visible": true,
         "zeroline": false,
         "zerolinecolor": "rgba(0, 0, 0, 1)"
        }
       }
      },
      "image/png": "",
      "text/html": [
       "    <div id=\"0d1e65cf-59a1-4d17-ae5c-c0f9b589682b\" style=\"width:600px;height:400px;\"></div>\n",
       "    <script>\n",
       "        requirejs.config({\n",
       "        paths: {\n",
       "            Plotly: 'https://cdn.plot.ly/plotly-2.6.3.min'\n",
       "        }\n",
       "    });\n",
       "    require(['Plotly'], function (Plotly) {\n",
       "\n",
       "        Plotly.newPlot('0d1e65cf-59a1-4d17-ae5c-c0f9b589682b', [\n",
       "    {\n",
       "        \"xaxis\": \"x\",\n",
       "        \"colorbar\": {\n",
       "            \"title\": \"\"\n",
       "        },\n",
       "        \"yaxis\": \"y\",\n",
       "        \"x\": [\n",
       "            0.020202020202020204,\n",
       "            0.0404040404040404,\n",
       "            0.06060606060606061,\n",
       "            0.0808080808080808,\n",
       "            0.10101010101010101,\n",
       "            0.12121212121212122,\n",
       "            0.1414141414141414,\n",
       "            0.1616161616161616,\n",
       "            0.1818181818181818,\n",
       "            0.20202020202020204,\n",
       "            0.22222222222222224,\n",
       "            0.24242424242424243,\n",
       "            0.2626262626262626,\n",
       "            0.2828282828282829,\n",
       "            0.30303030303030304,\n",
       "            0.32323232323232326,\n",
       "            0.3434343434343434,\n",
       "            0.36363636363636365,\n",
       "            0.38383838383838387,\n",
       "            0.40404040404040403,\n",
       "            0.42424242424242425,\n",
       "            0.4444444444444444,\n",
       "            0.46464646464646464,\n",
       "            0.48484848484848486,\n",
       "            0.5050505050505051,\n",
       "            0.5252525252525253,\n",
       "            0.5454545454545455,\n",
       "            0.5656565656565656,\n",
       "            0.5858585858585859,\n",
       "            0.6060606060606061,\n",
       "            0.6262626262626263,\n",
       "            0.6464646464646465,\n",
       "            0.6666666666666666,\n",
       "            0.6868686868686869,\n",
       "            0.7070707070707071,\n",
       "            0.7272727272727273,\n",
       "            0.7474747474747475,\n",
       "            0.7676767676767676,\n",
       "            0.7878787878787878,\n",
       "            0.8080808080808081,\n",
       "            0.8282828282828283,\n",
       "            0.8484848484848485,\n",
       "            0.8686868686868686,\n",
       "            0.8888888888888888,\n",
       "            0.9090909090909091,\n",
       "            0.9292929292929293,\n",
       "            0.9494949494949495,\n",
       "            0.9696969696969696,\n",
       "            0.9898989898989898,\n",
       "            1.0101010101010102,\n",
       "            1.0303030303030303,\n",
       "            1.0505050505050506,\n",
       "            1.0707070707070707,\n",
       "            1.090909090909091,\n",
       "            1.111111111111111,\n",
       "            1.1313131313131313,\n",
       "            1.1515151515151514,\n",
       "            1.1717171717171717,\n",
       "            1.1919191919191918,\n",
       "            1.2121212121212122,\n",
       "            1.2323232323232323,\n",
       "            1.2525252525252526,\n",
       "            1.2727272727272727,\n",
       "            1.292929292929293,\n",
       "            1.313131313131313,\n",
       "            1.3333333333333333,\n",
       "            1.3535353535353534,\n",
       "            1.3737373737373737,\n",
       "            1.393939393939394,\n",
       "            1.4141414141414141,\n",
       "            1.4343434343434345,\n",
       "            1.4545454545454546,\n",
       "            1.474747474747475,\n",
       "            1.494949494949495,\n",
       "            1.5151515151515151,\n",
       "            1.5353535353535352,\n",
       "            1.5555555555555556,\n",
       "            1.5757575757575757,\n",
       "            1.595959595959596,\n",
       "            1.6161616161616161,\n",
       "            1.6363636363636365,\n",
       "            1.6565656565656566,\n",
       "            1.676767676767677,\n",
       "            1.696969696969697,\n",
       "            1.7171717171717171,\n",
       "            1.7373737373737372,\n",
       "            1.7575757575757576,\n",
       "            1.7777777777777777,\n",
       "            1.797979797979798,\n",
       "            1.8181818181818181,\n",
       "            1.8383838383838385,\n",
       "            1.8585858585858586,\n",
       "            1.878787878787879,\n",
       "            1.898989898989899,\n",
       "            1.9191919191919191,\n",
       "            1.9393939393939392,\n",
       "            1.9595959595959596,\n",
       "            1.9797979797979797,\n",
       "            2.0\n",
       "        ],\n",
       "        \"showlegend\": true,\n",
       "        \"mode\": \"lines\",\n",
       "        \"name\": \"dtwa\",\n",
       "        \"zmin\": null,\n",
       "        \"legendgroup\": \"dtwa\",\n",
       "        \"zmax\": null,\n",
       "        \"line\": {\n",
       "            \"color\": \"rgba(0, 154, 250, 1.000)\",\n",
       "            \"shape\": \"linear\",\n",
       "            \"dash\": \"solid\",\n",
       "            \"width\": 1\n",
       "        },\n",
       "        \"y\": [\n",
       "            0.5000747046968758,\n",
       "            0.4980701793577182,\n",
       "            0.49398617829045954,\n",
       "            0.4878358302780334,\n",
       "            0.4796533161145724,\n",
       "            0.4694933440340412,\n",
       "            0.45743264275215223,\n",
       "            0.44357873224075367,\n",
       "            0.4280646483969921,\n",
       "            0.4110448375990908,\n",
       "            0.3926955078954122,\n",
       "            0.37321375282100033,\n",
       "            0.3528037944084421,\n",
       "            0.3316796292424501,\n",
       "            0.31005872057909095,\n",
       "            0.2881478437343887,\n",
       "            0.26614260477595386,\n",
       "            0.24422370454283976,\n",
       "            0.22254705524597282,\n",
       "            0.20123915587643304,\n",
       "            0.1804003738468615,\n",
       "            0.16010178122002608,\n",
       "            0.1403953426541938,\n",
       "            0.12131139016786692,\n",
       "            0.10286212202945823,\n",
       "            0.08505121201870972,\n",
       "            0.0678787604213557,\n",
       "            0.05134239545365453,\n",
       "            0.035453759380600615,\n",
       "            0.020237196796475735,\n",
       "            0.005741439287244394,\n",
       "            -0.007970141310034772,\n",
       "            -0.020809638673548646,\n",
       "            -0.032668371368481726,\n",
       "            -0.043403661270928755,\n",
       "            -0.05288280581623,\n",
       "            -0.06098139467485516,\n",
       "            -0.06759520901632035,\n",
       "            -0.07263356772734296,\n",
       "            -0.0760523203119882,\n",
       "            -0.07786718243148166,\n",
       "            -0.07812280244818127,\n",
       "            -0.0768782362429258,\n",
       "            -0.07420004821343815,\n",
       "            -0.07018184037947738,\n",
       "            -0.06492095601009729,\n",
       "            -0.058523829403353454,\n",
       "            -0.05107728766988428,\n",
       "            -0.04267577130626248,\n",
       "            -0.03341725755068521,\n",
       "            -0.023421540901445076,\n",
       "            -0.012805772663961188,\n",
       "            -0.0016846600840332402,\n",
       "            0.00982429935003505,\n",
       "            0.02161022288760312,\n",
       "            0.03354798452197701,\n",
       "            0.04553848726307605,\n",
       "            0.05752045994245546,\n",
       "            0.06946246972520548,\n",
       "            0.08136418949239668,\n",
       "            0.09325934459477683,\n",
       "            0.10520246929103085,\n",
       "            0.11725907732688017,\n",
       "            0.1294931751937372,\n",
       "            0.1419499987559462,\n",
       "            0.1546335135352008,\n",
       "            0.1674799066103929,\n",
       "            0.18038513902008546,\n",
       "            0.19321982761505938,\n",
       "            0.20581309821818589,\n",
       "            0.21793611282219585,\n",
       "            0.22935091153622822,\n",
       "            0.23985621280059172,\n",
       "            0.24926764485897873,\n",
       "            0.25743373787560614,\n",
       "            0.26423954044298875,\n",
       "            0.2696165433383191,\n",
       "            0.2735396308073424,\n",
       "            0.27605246971603864,\n",
       "            0.2772259747130108,\n",
       "            0.27715237922476543,\n",
       "            0.2759248524493417,\n",
       "            0.27363689543369785,\n",
       "            0.27042339261536114,\n",
       "            0.26647431792983106,\n",
       "            0.26194282471783875,\n",
       "            0.25696733269399097,\n",
       "            0.25168469459267784,\n",
       "            0.24623092037787386,\n",
       "            0.24073087544154578,\n",
       "            0.23524362370908944,\n",
       "            0.22982061970557535,\n",
       "            0.22447149023068055,\n",
       "            0.21917236569416432,\n",
       "            0.21387921731447163,\n",
       "            0.20852788285616708,\n",
       "            0.20303691448056554,\n",
       "            0.19730844259338784,\n",
       "            0.1912375406340028\n",
       "        ],\n",
       "        \"type\": \"scatter\"\n",
       "    }\n",
       "]\n",
       ", {\n",
       "    \"showlegend\": true,\n",
       "    \"xaxis\": {\n",
       "        \"showticklabels\": true,\n",
       "        \"gridwidth\": 0.5,\n",
       "        \"tickvals\": [\n",
       "            0.0,\n",
       "            0.5,\n",
       "            1.0,\n",
       "            1.5,\n",
       "            2.0\n",
       "        ],\n",
       "        \"range\": [\n",
       "            -0.039191919191919194,\n",
       "            2.0593939393939396\n",
       "        ],\n",
       "        \"domain\": [\n",
       "            0.07646908719743364,\n",
       "            0.9934383202099737\n",
       "        ],\n",
       "        \"mirror\": false,\n",
       "        \"tickangle\": 0,\n",
       "        \"showline\": true,\n",
       "        \"ticktext\": [\n",
       "            \"0.0\",\n",
       "            \"0.5\",\n",
       "            \"1.0\",\n",
       "            \"1.5\",\n",
       "            \"2.0\"\n",
       "        ],\n",
       "        \"zeroline\": false,\n",
       "        \"tickfont\": {\n",
       "            \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "            \"family\": \"sans-serif\",\n",
       "            \"size\": 11\n",
       "        },\n",
       "        \"zerolinecolor\": \"rgba(0, 0, 0, 1.000)\",\n",
       "        \"anchor\": \"y\",\n",
       "        \"visible\": true,\n",
       "        \"ticks\": \"inside\",\n",
       "        \"tickmode\": \"array\",\n",
       "        \"linecolor\": \"rgba(0, 0, 0, 1.000)\",\n",
       "        \"showgrid\": true,\n",
       "        \"title\": \"time [μs]\",\n",
       "        \"gridcolor\": \"rgba(0, 0, 0, 0.100)\",\n",
       "        \"titlefont\": {\n",
       "            \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "            \"family\": \"sans-serif\",\n",
       "            \"size\": 15\n",
       "        },\n",
       "        \"tickcolor\": \"rgb(0, 0, 0)\",\n",
       "        \"type\": \"-\"\n",
       "    },\n",
       "    \"paper_bgcolor\": \"rgba(255, 255, 255, 1.000)\",\n",
       "    \"annotations\": [],\n",
       "    \"height\": 400,\n",
       "    \"margin\": {\n",
       "        \"l\": 0,\n",
       "        \"b\": 20,\n",
       "        \"r\": 0,\n",
       "        \"t\": 20\n",
       "    },\n",
       "    \"plot_bgcolor\": \"rgba(255, 255, 255, 1.000)\",\n",
       "    \"yaxis\": {\n",
       "        \"showticklabels\": true,\n",
       "        \"gridwidth\": 0.5,\n",
       "        \"tickvals\": [\n",
       "            0.0,\n",
       "            0.1,\n",
       "            0.2,\n",
       "            0.30000000000000004,\n",
       "            0.4,\n",
       "            0.5\n",
       "        ],\n",
       "        \"range\": [\n",
       "            -0.09546872766253299,\n",
       "            0.5174206299112275\n",
       "        ],\n",
       "        \"domain\": [\n",
       "            0.07581474190726165,\n",
       "            0.9901574803149606\n",
       "        ],\n",
       "        \"mirror\": false,\n",
       "        \"tickangle\": 0,\n",
       "        \"showline\": true,\n",
       "        \"ticktext\": [\n",
       "            \"0.0\",\n",
       "            \"0.1\",\n",
       "            \"0.2\",\n",
       "            \"0.3\",\n",
       "            \"0.4\",\n",
       "            \"0.5\"\n",
       "        ],\n",
       "        \"zeroline\": false,\n",
       "        \"tickfont\": {\n",
       "            \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "            \"family\": \"sans-serif\",\n",
       "            \"size\": 11\n",
       "        },\n",
       "        \"zerolinecolor\": \"rgba(0, 0, 0, 1.000)\",\n",
       "        \"anchor\": \"x\",\n",
       "        \"visible\": true,\n",
       "        \"ticks\": \"inside\",\n",
       "        \"tickmode\": \"array\",\n",
       "        \"linecolor\": \"rgba(0, 0, 0, 1.000)\",\n",
       "        \"showgrid\": true,\n",
       "        \"title\": \"magnetization\",\n",
       "        \"gridcolor\": \"rgba(0, 0, 0, 0.100)\",\n",
       "        \"titlefont\": {\n",
       "            \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "            \"family\": \"sans-serif\",\n",
       "            \"size\": 15\n",
       "        },\n",
       "        \"tickcolor\": \"rgb(0, 0, 0)\",\n",
       "        \"type\": \"-\"\n",
       "    },\n",
       "    \"legend_position\": {\n",
       "        \"yanchor\": \"auto\",\n",
       "        \"xanchor\": \"auto\",\n",
       "        \"bordercolor\": \"rgba(0, 0, 0, 1.000)\",\n",
       "        \"bgcolor\": \"rgba(255, 255, 255, 1.000)\",\n",
       "        \"borderwidth\": 1,\n",
       "        \"tracegroupgap\": 0,\n",
       "        \"y\": 1.0,\n",
       "        \"font\": {\n",
       "            \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "            \"family\": \"sans-serif\",\n",
       "            \"size\": 11\n",
       "        },\n",
       "        \"title\": {\n",
       "            \"font\": {\n",
       "                \"color\": \"rgba(0, 0, 0, 1.000)\",\n",
       "                \"family\": \"sans-serif\",\n",
       "                \"size\": 15\n",
       "            },\n",
       "            \"text\": \"\"\n",
       "        },\n",
       "        \"traceorder\": \"normal\",\n",
       "        \"x\": 1.0\n",
       "    },\n",
       "    \"width\": 600\n",
       "}\n",
       ");\n",
       "\n",
       "    });\n",
       "    </script>\n"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot(times[2:end], 0.5 * sol[2:end, 1], label=\"dtwa\")\n",
    "xaxis!(\"time [μs]\")\n",
    "yaxis!(\"magnetization\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "retcode: Success\n",
       "Interpolation: 1st order linear\n",
       "t: 500-element Vector{Float64}:\n",
       "  0.0\n",
       "  0.02004008016032064\n",
       "  0.04008016032064128\n",
       "  0.06012024048096192\n",
       "  0.08016032064128256\n",
       "  0.1002004008016032\n",
       "  0.12024048096192384\n",
       "  0.1402805611222445\n",
       "  0.16032064128256512\n",
       "  0.18036072144288579\n",
       "  0.2004008016032064\n",
       "  0.22044088176352705\n",
       "  0.24048096192384769\n",
       "  ⋮\n",
       "  9.779559118236472\n",
       "  9.799599198396793\n",
       "  9.819639278557114\n",
       "  9.839679358717435\n",
       "  9.859719438877756\n",
       "  9.879759519038076\n",
       "  9.899799599198397\n",
       "  9.919839679358716\n",
       "  9.939879759519037\n",
       "  9.959919839679358\n",
       "  9.97995991983968\n",
       " 10.0\n",
       "u: 500-element Vector{Matrix{Float64}}:\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " ⋮\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]\n",
       " [1.0 0.0 0.0; 1.0 0.0 0.0]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.8.2",
   "language": "julia",
   "name": "julia-1.8"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
